AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  PortfolioDomainName:
    Description: Website Domain Name
    Type: String
    Default: rana.lol

Resources:
  # Creating resources for my personal website
  PortfolioWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PortfolioDomainName
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # PublicAccessBlockConfiguration:
      #     BlockPublicAcls: false
      # OwnershipControls:
      #   Rules:
      #     - ObjectOwnership: ObjectWriter
      # WebsiteConfiguration:
        # IndexDocument: index.html
        # ErrorDocument: index.html

  PortfolioHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref PortfolioDomainName 

  PortfolioCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref PortfolioDomainName
      DomainValidationOptions:
        - DomainName: !Ref PortfolioDomainName
          HostedZoneId: !Ref PortfolioHostedZone
      SubjectAlternativeNames: 
        - "*.rana.lol"
      ValidationMethod: DNS

  PortfolioWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudFrontDistribution
    Properties:
      Bucket: !Ref PortfolioWebsiteBucket
      PolicyDocument:
        Statement:
          # - Sid: PublicReadGetObject
          #   Effect: Allow
          #   Principal: '*'
          #   Action:
          #     - s3:GetObject
          #   Resource: !Join
          #     - ''
          #     - - 'arn:aws:s3:::'
          #       - !Ref PortfolioWebsiteBucket
          #       - '/*'
          - Sid: CloudFrontDistributionAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt TheCloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              s3:GetObject
            Resource: !Sub ${PortfolioWebsiteBucket.Arn}/*
            # Condition:
            #   StringEquals:
            #     AWS:SourceArn: !Sub ${CloudFrontDistribution.Arn}

  # # Creating certificate in certificate manager    
  # CloudFrontOriginAccessControl:
  #   Type: AWS::CloudFront::OriginAccessControl
  #   Properties:
  #     OriginAccessControlConfig:
  #       Description: "Origin Access Control (OAC)"
  #       Name: portfolio-website-oac
  #       OriginAccessControlOriginType: s3
  #       SigningBehaviour: always
  #       SigningProtocol: sigv4

  PortfolioCloudFrontOriginAccessIdentity:
  Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  Properties:
    CloudFrontOriginAccessIdentityConfig:
      Comment: !Sub 'CloudFront OAI for ${PortfolioDomainName}'

  PortfolioCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution" 
    DependsOn: PortfolioWebsiteBucket
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref PortfolioDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref PortfolioCertificate
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            # ResponsePagePath: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            Cookies:
                Forward: none
            QueryString: false
          MaxTTL: 86400
          MinTTL: 60
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: 
              !Join [ "", [ !Ref PortfolioWebsiteBucket, ".s3.amazonaws.com" ] ]
            Id: personal-website-host
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [ "", [ "origin-access-identity/cloudfront/", !Ref PortfolioCloudFrontOriginAccessIdentity ] ]
            #   OriginAccessIdentity: ""
            # OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        PriceClass: PriceClass_All

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PortfolioHostedZone
      RecordSets:
      - Name: !Ref PortfolioDomainName
        Type: A
        AliasTarget: 
          HostedZoneId: !Ref PortfolioHostedZone
          DNSName: !GetAtt
            - PortfolioCloudFrontDistribution
            - DomainName
      # Comment: DNS name for cloud front
      # Name: !Ref PortfolioDomainName
      # Type: A
      # ResourceRecords:
      #   - !GetAtt CloudFrontDistribution.DomainName
  DependsOn: PortfolioCloudFrontDistribution

Outputs:
  PortfolioWebsiteBucket:
    Description: Bucket name of the portfolio website
    Value: !Ref PortfolioWebsiteBucket
  PortfolioWebsiteBucketURL:
    Description: URL of the deployed React app in S3 bucket
    Value: !GetAtt PortfolioWebsiteBucket.WebsiteURL
  PortfolioHostedZone:
    Description: Name of Hosted Zone for the portfolio website
    Value: !Ref PortfolioHostedZone
  PortfolioCertificate:
    Description: Certificate of the portfolio website
    Value: !Ref PortfolioCertificate

